<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>namedrj</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-01T18:32:08.163Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>namedrj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java算法</title>
    <link href="http://yoursite.com/2018/04/02/%E7%AE%97%E6%B3%95/"/>
    <id>http://yoursite.com/2018/04/02/算法/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-04-01T18:32:08.163Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**辗转相除法，也称作欧几里得算法。</span></span><br><span class="line"><span class="comment"> * 辗转相除法基于如下原理：</span></span><br><span class="line"><span class="comment"> * 两个整数的最大公约数等于其中较小数和两数的差的最大公约数。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">return</span> (a%b == <span class="number">0</span>) ? b : gcd(b, a%b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/03/26/hello-world/"/>
    <id>http://yoursite.com/2018/03/26/hello-world/</id>
    <published>2018-03-25T16:44:52.525Z</published>
    <updated>2018-03-25T16:44:52.525Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java runnable</title>
    <link href="http://yoursite.com/2018/03/26/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/03/26/Java多线程/</id>
    <published>2018-03-25T16:00:00.000Z</published>
    <updated>2018-04-01T18:19:08.458Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> java.lang;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The &lt;code&gt;Runnable&lt;/code&gt; interface should be implemented by any</span></span><br><span class="line"><span class="comment"> * class whose instances are intended to be executed by a thread. The</span></span><br><span class="line"><span class="comment"> * class must define a method of no arguments called &lt;code&gt;run&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * This interface is designed to provide a common protocol for objects that</span></span><br><span class="line"><span class="comment"> * wish to execute code while they are active. For example,</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Runnable&lt;/code&gt; is implemented by class &lt;code&gt;Thread&lt;/code&gt;.</span></span><br><span class="line"><span class="comment"> * Being active simply means that a thread has been started and has not</span></span><br><span class="line"><span class="comment"> * yet been stopped.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * In addition, &lt;code&gt;Runnable&lt;/code&gt; provides the means for a class to be</span></span><br><span class="line"><span class="comment"> * active while not subclassing &lt;code&gt;Thread&lt;/code&gt;. A class that implements</span></span><br><span class="line"><span class="comment"> * &lt;code&gt;Runnable&lt;/code&gt; can run without subclassing &lt;code&gt;Thread&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * by instantiating a &lt;code&gt;Thread&lt;/code&gt; instance and passing itself in</span></span><br><span class="line"><span class="comment"> * as the target.  In most cases, the &lt;code&gt;Runnable&lt;/code&gt; interface should</span></span><br><span class="line"><span class="comment"> * be used if you are only planning to override the &lt;code&gt;run()&lt;/code&gt;</span></span><br><span class="line"><span class="comment"> * method and no other &lt;code&gt;Thread&lt;/code&gt; methods.</span></span><br><span class="line"><span class="comment"> * This is important because classes should not be subclassed</span></span><br><span class="line"><span class="comment"> * unless the programmer intends on modifying or enhancing the fundamental</span></span><br><span class="line"><span class="comment"> * behavior of the class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>  Arthur van Hoff</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.lang.Thread</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span>     java.util.concurrent.Callable</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span>   JDK1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object's</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>扩展<code>java.lang.Thread</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过扩展 Thread 类来创建线程</span></span><br><span class="line"><span class="comment"> * 子类必须重写 run() 方法，该方法是新线程的入口。</span></span><br><span class="line"><span class="comment"> * 它也必须调用 star() 方法才能执行。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Ruj</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2018-03-27</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Thread t;</span><br><span class="line">    <span class="keyword">private</span> String threadName;</span><br><span class="line">    ThreadDemo(String name) &#123;</span><br><span class="line">        threadName = name;</span><br><span class="line">        System.out.println(<span class="string">"Creating"</span> + threadName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Running "</span> + threadName);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">4</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Thread: "</span> + threadName + <span class="string">", "</span> + i);</span><br><span class="line">                <span class="comment">// 让线程睡一会</span></span><br><span class="line">                Thread.sleep(<span class="number">50</span>);<span class="comment">// 50ms</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Thread "</span> + threadName + <span class="string">" interrupted."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"Thread "</span> + threadName + <span class="string">" exiting."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Starting "</span> + threadName);</span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            t = <span class="keyword">new</span> Thread(<span class="keyword">this</span>, threadName);</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThreadDemo T1 = <span class="keyword">new</span> ThreadDemo(<span class="string">"Thread-1"</span>);</span><br><span class="line">        T1.start();</span><br><span class="line"></span><br><span class="line">        ThreadDemo T2 = <span class="keyword">new</span> ThreadDemo(<span class="string">"Thread-2"</span>);</span><br><span class="line">        T2.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现<code>java.lang.Runnable</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Thread和Runnable的区别<br>Thread这个类，它有个构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment">    * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> (null, target, gname)&#125;, where &#123;<span class="doctag">@code</span> gname&#125; is a newly generated</span></span><br><span class="line"><span class="comment">    * name. Automatically generated names are of the form</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> "Thread-"+&#125;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  target</span></span><br><span class="line"><span class="comment">    *         the object whose &#123;<span class="doctag">@code</span> run&#125; method is invoked when this thread</span></span><br><span class="line"><span class="comment">    *         is started. If &#123;<span class="doctag">@code</span> null&#125;, this classes &#123;<span class="doctag">@code</span> run&#125; method does</span></span><br><span class="line"><span class="comment">    *         nothing.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target)</span> </span>&#123;</span><br><span class="line">       init(<span class="keyword">null</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Creates a new Thread that inherits the given AccessControlContext.</span></span><br><span class="line"><span class="comment">    * This is not a public constructor.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   Thread(Runnable target, AccessControlContext acc) &#123;</span><br><span class="line">       init(<span class="keyword">null</span>, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>, acc, <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment">    * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> (group, target, gname)&#125; ,where &#123;<span class="doctag">@code</span> gname&#125; is a newly generated</span></span><br><span class="line"><span class="comment">    * name. Automatically generated names are of the form</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> "Thread-"+&#125;&lt;i&gt;n&lt;/i&gt;, where &lt;i&gt;n&lt;/i&gt; is an integer.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  group</span></span><br><span class="line"><span class="comment">    *         the thread group. If &#123;<span class="doctag">@code</span> null&#125; and there is a security</span></span><br><span class="line"><span class="comment">    *         manager, the group is determined by &#123;<span class="doctag">@linkplain</span></span></span><br><span class="line"><span class="comment">    *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()&#125;.</span></span><br><span class="line"><span class="comment">    *         If there is not a security manager or &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">    *         SecurityManager.getThreadGroup()&#125; returns &#123;<span class="doctag">@code</span> null&#125;, the group</span></span><br><span class="line"><span class="comment">    *         is set to the current thread's thread group.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  target</span></span><br><span class="line"><span class="comment">    *         the object whose &#123;<span class="doctag">@code</span> run&#125; method is invoked when this thread</span></span><br><span class="line"><span class="comment">    *         is started. If &#123;<span class="doctag">@code</span> null&#125;, this thread's run method is invoked.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment">    *          if the current thread cannot create a thread in the specified</span></span><br><span class="line"><span class="comment">    *          thread group</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(ThreadGroup group, Runnable target)</span> </span>&#123;</span><br><span class="line">       init(group, target, <span class="string">"Thread-"</span> + nextThreadNum(), <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment">    * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> (null, null, name)&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>   name</span></span><br><span class="line"><span class="comment">    *          the name of the new thread</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       init(<span class="keyword">null</span>, <span class="keyword">null</span>, name, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment">    * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> (group, null, name)&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  group</span></span><br><span class="line"><span class="comment">    *         the thread group. If &#123;<span class="doctag">@code</span> null&#125; and there is a security</span></span><br><span class="line"><span class="comment">    *         manager, the group is determined by &#123;<span class="doctag">@linkplain</span></span></span><br><span class="line"><span class="comment">    *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()&#125;.</span></span><br><span class="line"><span class="comment">    *         If there is not a security manager or &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">    *         SecurityManager.getThreadGroup()&#125; returns &#123;<span class="doctag">@code</span> null&#125;, the group</span></span><br><span class="line"><span class="comment">    *         is set to the current thread's thread group.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment">    *         the name of the new thread</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment">    *          if the current thread cannot create a thread in the specified</span></span><br><span class="line"><span class="comment">    *          thread group</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(ThreadGroup group, String name)</span> </span>&#123;</span><br><span class="line">       init(group, <span class="keyword">null</span>, name, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class="line"><span class="comment">    * effect as &#123;<span class="doctag">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> (null, target, name)&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  target</span></span><br><span class="line"><span class="comment">    *         the object whose &#123;<span class="doctag">@code</span> run&#125; method is invoked when this thread</span></span><br><span class="line"><span class="comment">    *         is started. If &#123;<span class="doctag">@code</span> null&#125;, this thread's run method is invoked.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment">    *         the name of the new thread</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(Runnable target, String name)</span> </span>&#123;</span><br><span class="line">       init(<span class="keyword">null</span>, target, name, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object so that it has &#123;<span class="doctag">@code</span> target&#125;</span></span><br><span class="line"><span class="comment">    * as its run object, has the specified &#123;<span class="doctag">@code</span> name&#125; as its name,</span></span><br><span class="line"><span class="comment">    * and belongs to the thread group referred to by &#123;<span class="doctag">@code</span> group&#125;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;If there is a security manager, its</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@link</span> SecurityManager#checkAccess(ThreadGroup) checkAccess&#125;</span></span><br><span class="line"><span class="comment">    * method is invoked with the ThreadGroup as its argument.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;In addition, its &#123;<span class="doctag">@code</span> checkPermission&#125; method is invoked with</span></span><br><span class="line"><span class="comment">    * the &#123;<span class="doctag">@code</span> RuntimePermission("enableContextClassLoaderOverride")&#125;</span></span><br><span class="line"><span class="comment">    * permission when invoked directly or indirectly by the constructor</span></span><br><span class="line"><span class="comment">    * of a subclass which overrides the &#123;<span class="doctag">@code</span> getContextClassLoader&#125;</span></span><br><span class="line"><span class="comment">    * or &#123;<span class="doctag">@code</span> setContextClassLoader&#125; methods.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The priority of the newly created thread is set equal to the</span></span><br><span class="line"><span class="comment">    * priority of the thread creating it, that is, the currently running</span></span><br><span class="line"><span class="comment">    * thread. The method &#123;<span class="doctag">@linkplain</span> #setPriority setPriority&#125; may be</span></span><br><span class="line"><span class="comment">    * used to change the priority to a new value.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The newly created thread is initially marked as being a daemon</span></span><br><span class="line"><span class="comment">    * thread if and only if the thread creating it is currently marked</span></span><br><span class="line"><span class="comment">    * as a daemon thread. The method &#123;<span class="doctag">@linkplain</span> #setDaemon setDaemon&#125;</span></span><br><span class="line"><span class="comment">    * may be used to change whether or not a thread is a daemon.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  group</span></span><br><span class="line"><span class="comment">    *         the thread group. If &#123;<span class="doctag">@code</span> null&#125; and there is a security</span></span><br><span class="line"><span class="comment">    *         manager, the group is determined by &#123;<span class="doctag">@linkplain</span></span></span><br><span class="line"><span class="comment">    *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()&#125;.</span></span><br><span class="line"><span class="comment">    *         If there is not a security manager or &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">    *         SecurityManager.getThreadGroup()&#125; returns &#123;<span class="doctag">@code</span> null&#125;, the group</span></span><br><span class="line"><span class="comment">    *         is set to the current thread's thread group.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  target</span></span><br><span class="line"><span class="comment">    *         the object whose &#123;<span class="doctag">@code</span> run&#125; method is invoked when this thread</span></span><br><span class="line"><span class="comment">    *         is started. If &#123;<span class="doctag">@code</span> null&#125;, this thread's run method is invoked.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment">    *         the name of the new thread</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment">    *          if the current thread cannot create a thread in the specified</span></span><br><span class="line"><span class="comment">    *          thread group or cannot override the context class loader methods.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(ThreadGroup group, Runnable target, String name)</span> </span>&#123;</span><br><span class="line">       init(group, target, name, <span class="number">0</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Allocates a new &#123;<span class="doctag">@code</span> Thread&#125; object so that it has &#123;<span class="doctag">@code</span> target&#125;</span></span><br><span class="line"><span class="comment">    * as its run object, has the specified &#123;<span class="doctag">@code</span> name&#125; as its name,</span></span><br><span class="line"><span class="comment">    * and belongs to the thread group referred to by &#123;<span class="doctag">@code</span> group&#125;, and has</span></span><br><span class="line"><span class="comment">    * the specified &lt;i&gt;stack size&lt;/i&gt;.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;This constructor is identical to &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">    * #Thread(ThreadGroup,Runnable,String)&#125; with the exception of the fact</span></span><br><span class="line"><span class="comment">    * that it allows the thread stack size to be specified.  The stack size</span></span><br><span class="line"><span class="comment">    * is the approximate number of bytes of address space that the virtual</span></span><br><span class="line"><span class="comment">    * machine is to allocate for this thread's stack.  &lt;b&gt;The effect of the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> stackSize&#125; parameter, if any, is highly platform dependent.&lt;/b&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;On some platforms, specifying a higher value for the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> stackSize&#125; parameter may allow a thread to achieve greater</span></span><br><span class="line"><span class="comment">    * recursion depth before throwing a &#123;<span class="doctag">@link</span> StackOverflowError&#125;.</span></span><br><span class="line"><span class="comment">    * Similarly, specifying a lower value may allow a greater number of</span></span><br><span class="line"><span class="comment">    * threads to exist concurrently without throwing an &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">    * OutOfMemoryError&#125; (or other internal error).  The details of</span></span><br><span class="line"><span class="comment">    * the relationship between the value of the &lt;tt&gt;stackSize&lt;/tt&gt; parameter</span></span><br><span class="line"><span class="comment">    * and the maximum recursion depth and concurrency level are</span></span><br><span class="line"><span class="comment">    * platform-dependent.  &lt;b&gt;On some platforms, the value of the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> stackSize&#125; parameter may have no effect whatsoever.&lt;/b&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;The virtual machine is free to treat the &#123;<span class="doctag">@code</span> stackSize&#125;</span></span><br><span class="line"><span class="comment">    * parameter as a suggestion.  If the specified value is unreasonably low</span></span><br><span class="line"><span class="comment">    * for the platform, the virtual machine may instead use some</span></span><br><span class="line"><span class="comment">    * platform-specific minimum value; if the specified value is unreasonably</span></span><br><span class="line"><span class="comment">    * high, the virtual machine may instead use some platform-specific</span></span><br><span class="line"><span class="comment">    * maximum.  Likewise, the virtual machine is free to round the specified</span></span><br><span class="line"><span class="comment">    * value up or down as it sees fit (or to ignore it completely).</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Specifying a value of zero for the &#123;<span class="doctag">@code</span> stackSize&#125; parameter will</span></span><br><span class="line"><span class="comment">    * cause this constructor to behave exactly like the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> Thread(ThreadGroup, Runnable, String)&#125; constructor.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;&lt;i&gt;Due to the platform-dependent nature of the behavior of this</span></span><br><span class="line"><span class="comment">    * constructor, extreme care should be exercised in its use.</span></span><br><span class="line"><span class="comment">    * The thread stack size necessary to perform a given computation will</span></span><br><span class="line"><span class="comment">    * likely vary from one JRE implementation to another.  In light of this</span></span><br><span class="line"><span class="comment">    * variation, careful tuning of the stack size parameter may be required,</span></span><br><span class="line"><span class="comment">    * and the tuning may need to be repeated for each JRE implementation on</span></span><br><span class="line"><span class="comment">    * which an application is to run.&lt;/i&gt;</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * &lt;p&gt;Implementation note: Java platform implementers are encouraged to</span></span><br><span class="line"><span class="comment">    * document their implementation's behavior with respect to the</span></span><br><span class="line"><span class="comment">    * &#123;<span class="doctag">@code</span> stackSize&#125; parameter.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  group</span></span><br><span class="line"><span class="comment">    *         the thread group. If &#123;<span class="doctag">@code</span> null&#125; and there is a security</span></span><br><span class="line"><span class="comment">    *         manager, the group is determined by &#123;<span class="doctag">@linkplain</span></span></span><br><span class="line"><span class="comment">    *         SecurityManager#getThreadGroup SecurityManager.getThreadGroup()&#125;.</span></span><br><span class="line"><span class="comment">    *         If there is not a security manager or &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">    *         SecurityManager.getThreadGroup()&#125; returns &#123;<span class="doctag">@code</span> null&#125;, the group</span></span><br><span class="line"><span class="comment">    *         is set to the current thread's thread group.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  target</span></span><br><span class="line"><span class="comment">    *         the object whose &#123;<span class="doctag">@code</span> run&#125; method is invoked when this thread</span></span><br><span class="line"><span class="comment">    *         is started. If &#123;<span class="doctag">@code</span> null&#125;, this thread's run method is invoked.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  name</span></span><br><span class="line"><span class="comment">    *         the name of the new thread</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span>  stackSize</span></span><br><span class="line"><span class="comment">    *         the desired stack size for the new thread, or zero to indicate</span></span><br><span class="line"><span class="comment">    *         that this parameter is to be ignored.</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span>  SecurityException</span></span><br><span class="line"><span class="comment">    *          if the current thread cannot create a thread in the specified</span></span><br><span class="line"><span class="comment">    *          thread group</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@since</span> 1.4</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Thread</span><span class="params">(ThreadGroup group, Runnable target, String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                 <span class="keyword">long</span> stackSize)</span> </span>&#123;</span><br><span class="line">       init(group, target, name, stackSize);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Thread 类的一些重要方法：</span></span><br><span class="line"><span class="comment">1public void start()</span></span><br><span class="line"><span class="comment">使该线程开始执行；Java 虚拟机调用该线程的 run 方法。</span></span><br><span class="line"><span class="comment">2public void run()</span></span><br><span class="line"><span class="comment">如果该线程是使用独立的 Runnable 运行对象构造的，则调用该 Runnable 对象的 run 方法；否则，该方法不执行任何操作并返回。</span></span><br><span class="line"><span class="comment">3public final void setName(String name)</span></span><br><span class="line"><span class="comment">改变线程名称，使之与参数 name 相同。</span></span><br><span class="line"><span class="comment">4public final void setPriority(int priority)</span></span><br><span class="line"><span class="comment"> 更改线程的优先级。</span></span><br><span class="line"><span class="comment">5public final void setDaemon(boolean on)</span></span><br><span class="line"><span class="comment">将该线程标记为守护线程或用户线程。</span></span><br><span class="line"><span class="comment">6public final void join(long millisec)</span></span><br><span class="line"><span class="comment">等待该线程终止的时间最长为 millis 毫秒。</span></span><br><span class="line"><span class="comment">7public void interrupt()</span></span><br><span class="line"><span class="comment">中断线程。</span></span><br><span class="line"><span class="comment">8public final boolean isAlive()</span></span><br><span class="line"><span class="comment">测试线程是否处于活动状态。*/</span></span><br></pre></td></tr></table></figure><p>​</p></li><li><p>线程状态转换</p></li><li><p>线程调度</p></li><li><p>常用函数说明</p></li><li><p>常见线程名词解释</p></li><li><p>线程同步</p></li><li><p>线程数据传递</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SQL基础</title>
    <link href="http://yoursite.com/2018/03/26/SQL%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/03/26/SQL基础/</id>
    <published>2018-03-25T16:00:00.000Z</published>
    <updated>2018-04-01T18:19:43.495Z</updated>
    
    <content type="html"><![CDATA[<p>SELECT 选取数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name </span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></p><p>SELECT DISTINCT 用于返回唯一不同的值，也就是去掉重复的值。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> column_name,column_name </span><br><span class="line"><span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></p><p>WHERE 子句用于过滤记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">operator</span> <span class="keyword">value</span></span><br><span class="line"><span class="comment">/* 运算符 =，!=, &gt;, &lt;, &gt;=, &lt;=, BETWEEN, LIKE, IN 可以在WHERE子句里使用</span></span><br><span class="line"><span class="comment"> * IN(指定针对某个列的多个可能值)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure></p><p>AND &amp; OR 运算符用于基于一个以上的条件对记录进行过滤<br>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。<br>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*AND*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country=<span class="string">'CN'</span></span><br><span class="line"><span class="keyword">AND</span> alexa &gt; <span class="number">50</span>;</span><br><span class="line"><span class="comment">/*OR*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> country=<span class="string">'USA'</span></span><br><span class="line"><span class="keyword">OR</span> country=<span class="string">'CN'</span>;</span><br><span class="line"><span class="comment">/*AND &amp; OR*/</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> Websites</span><br><span class="line"><span class="keyword">WHERE</span> alexa &gt; <span class="number">15</span></span><br><span class="line"><span class="keyword">AND</span> (country=<span class="string">'CN'</span> <span class="keyword">OR</span> country=<span class="string">'USA'</span>);</span><br></pre></td></tr></table></figure></p><p>ORDER BY 关键字用于对结果集进行排序<br>ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序。<br>ORDER BY 关键字默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name,column_name</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> column_name,column_name <span class="keyword">ASC</span>|<span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure></p><p>INSERT INTO 语句用于向表中插入新纪录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*INSERT INTO 语句可以有两种编写形式。</span></span><br><span class="line"><span class="comment"> *第一种形式无需指定要插入数据的列名，只需提供被插入的值即可：</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br><span class="line"><span class="comment">/*第二种形式需要指定列名及被插入的值：*/</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (column1,column2,column3,...)</span><br><span class="line"><span class="keyword">VALUES</span> (value1,value2,value3,...);</span><br></pre></td></tr></table></figure></p><p>UPDATE 语句用于更新表中已存在的记录<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> table_name</span><br><span class="line"><span class="keyword">SET</span> column1=value1,column2=value2,...</span><br><span class="line"><span class="keyword">WHERE</span> some_column=some_value;</span><br><span class="line"><span class="comment">/*执行没有 WHERE 子句的 UPDATE 要慎重，再慎重。*/</span></span><br></pre></td></tr></table></figure></p><p>DELETE 语句用于删除表中的行<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> some_column=some_value;</span><br><span class="line"><span class="comment">/*删除所有数据，可以在不删除表的情况下，删除表中所有的行。这意味着表结构、属性、索引将保持不变：*/</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name;</span><br><span class="line">或</span><br><span class="line"><span class="keyword">DELETE</span> * <span class="keyword">FROM</span> table_name;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SELECT 选取数据&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
    
  </entry>
  
</feed>
